import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as r,c as n,a as e}from"./app-PDj9KKPF.js";const a={},i=e("h1",{id:"spring-mvc-导航栏",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#spring-mvc-导航栏"},[e("span",null,"Spring MVC 导航栏")])],-1),o=e("p",null,"\\1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。 \\2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射： a) 不存在 i. 再判断是否配置了mvc:default-servlet-handler ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误 iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误 b) 存在则执行下面的流程",-1),p=e("p",null,"\\3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及 Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。 \\4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。 \\5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】 \\6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作： a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定 的响应信息 b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等 c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等 d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中 \\7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。 \\8) 此时将开始执行拦截器的postHandle(...)方法【逆向】。 \\9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行 HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model 和View，来渲染视图。 \\10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。 \\11) 将渲染结果返回给客户端。",-1),c=e("figure",null,[e("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/25864774/1666182848168-a3174f94-dec0-464d-aed9-9c7c6612117f.png",alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),l=[i,o,p,c];function s(d,m){return r(),n("div",null,l)}const u=t(a,[["render",s],["__file","spring-mvc.html.vue"]]),v=JSON.parse('{"path":"/spring/spring-mvc.html","title":"Spring MVC 导航栏","lang":"zh-CN","frontmatter":{"description":"Spring MVC 导航栏 \\\\1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。 \\\\2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射： a) 不存在 i. 再判断是否配置了mvc:default-servlet-handler ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/spring/spring-mvc.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Spring MVC 导航栏"}],["meta",{"property":"og:description","content":"Spring MVC 导航栏 \\\\1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。 \\\\2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射： a) 不存在 i. 再判断是否配置了mvc:default-servlet-handler ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2022/png/25864774/1666182848168-a3174f94-dec0-464d-aed9-9c7c6612117f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring MVC 导航栏\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2022/png/25864774/1666182848168-a3174f94-dec0-464d-aed9-9c7c6612117f.png\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"spring/spring-mvc.md","localizedDate":"2024年4月24日","autoDesc":true}');export{u as comp,v as data};
