import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,d as t,f as s}from"./app-PDj9KKPF.js";const i={},r=s('<h1 id="集合导航栏" tabindex="-1"><a class="header-anchor" href="#集合导航栏"><span>集合导航栏</span></a></h1><figure><img src="http://images.xyzzs.top/image/image-20230203194621727.png_char" alt="image-20230203194621727" tabindex="0" loading="lazy"><figcaption>image-20230203194621727</figcaption></figure><h3 id="集合框架底层数据结构总结" tabindex="-1"><a class="header-anchor" href="#集合框架底层数据结构总结"><span>集合框架底层数据结构总结</span></a></h3><p>先来看一下 <code>Collection</code> 接口下面的集合。</p><p><strong>List</strong></p><ul><li><code>ArrayList</code>： <code>Object[]</code> 数组</li><li><code>Vector</code>：<code>Object[]</code> 数组</li><li><code>LinkedList</code>： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)</li></ul><p><strong>Set</strong></p><ul><li><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素</li><li><code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现</li><li><code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)</li></ul><p><strong>Queue</strong></p><ul><li><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现二叉堆</li><li><code>ArrayQueue</code>: <code>Object[]</code> 数组 + 双指针</li></ul><p>再来看看 <code>Map</code> 接口下面的集合。</p><p><strong>Map</strong></p>',12),u=n("li",null,[n("code",null,"HashMap"),a("： JDK1.8 之前 "),n("code",null,"HashMap"),a(" 由数组+链表组成的，数组是 "),n("code",null,"HashMap"),a(" 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")],-1),d=n("code",null,"LinkedHashMap",-1),k=n("code",null,"LinkedHashMap",-1),m=n("code",null,"HashMap",-1),h=n("code",null,"LinkedHashMap",-1),v={href:"https://www.imooc.com/article/22931",target:"_blank",rel:"noopener noreferrer"},g=s('<h3 id="如何选用集合" tabindex="-1"><a class="header-anchor" href="#如何选用集合"><span>如何选用集合?</span></a></h3><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 <code>Map</code> 接口下的集合，需要排序时选择 <code>TreeMap</code>,不需要排序时就选择 <code>HashMap</code>,需要保证线程安全就选用 <code>ConcurrentHashMap</code>。</p><p>当我们只需要存放元素值时，就选择实现<code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code>，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code>，然后再根据实现这些接口的集合的特点来选用。</p><h2 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h2><p><code>ArrayList</code> 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用<code>ensureCapacity</code>操作来增加 <code>ArrayList</code> 实例的容量。这可以减少递增式再分配的数量。</p><p><code>ArrayList</code>继承于 <strong><code>AbstractList</code></strong> ，实现了 <strong><code>List</code></strong>, <strong><code>RandomAccess</code></strong>, <strong><code>Cloneable</code></strong>, <strong><code>java.io.Serializable</code></strong> 这些接口。</p>',6),b=n("code",null,"RandomAccess",-1),y=n("strong",null,"快速随机访问",-1),w=n("code",null,"ArrayList",-1),f={href:"https://blog.csdn.net/weixin_43598687/article/details/121617615",target:"_blank",rel:"noopener noreferrer"},_=s("<li><code>ArrayList</code> 实现了 <strong><code>Cloneable</code> 接口</strong> ，即覆盖了函数<code>clone()</code>，能被克隆。</li><li><code>ArrayList</code> 实现了 <code>java.io.Serializable</code>接口，这意味着<code>ArrayList</code>支持序列化，能通过序列化去传输</li>",2),A=s(`<p>核心源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8683452581122892189L</span><span class="token punctuation">;</span>
	<span class="token comment">//默认初始容量大小</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">//空数组（用于空实例）。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

     <span class="token comment">//用于默认大小空实例的共享空数组实例。</span>
     <span class="token comment">//我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//保存ArrayList数据的数组</span>
    <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// non-private to simplify nested class access</span>

    <span class="token comment">//ArrayList 所包含的元素个数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token comment">//带初始容量参数的构造函数。（用户自己指定容量）</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果传入的参数大于0，创建initialCapacity大小的数组</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal Capacity: &quot;</span><span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//默认无参构造函数，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//相当于  Object[] obj = new Object[]{};</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//ArrayList扩容的核心方法。</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// oldCapacity为旧容量，newCapacity为新容量</span>
        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span>
        <span class="token comment">//我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
        <span class="token comment">//再检查新容量是否超出了ArrayList所定义的最大容量，</span>
        <span class="token comment">//若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span>
        <span class="token comment">//如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>
        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//比较minCapacity和 MAX_ARRAY_SIZE</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">)</span> <span class="token operator">?</span>
            <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span>
            <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将指定的元素追加到此列表的末尾。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>
        <span class="token comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span>
        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在此列表中的指定位置插入指定的元素。
     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；
     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>
        <span class="token comment">//arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arraylist-和-vector-的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-vector-的区别"><span>Arraylist 和 Vector 的区别?</span></a></h3><ol><li><code>ArrayList</code> 是 <code>List</code> 的主要实现类，底层使用 <code>Object[ ]</code>存储，适用于频繁的查找工作，线程不安全 ；</li><li><code>Vector</code> 是 <code>List</code> 的古老实现类，底层使用 <code>Object[ ]</code>存储，线程安全的。</li></ol><h2 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap"><span>HashMap</span></a></h2><h3 id="hashmap-的插入流程是怎么样的" tabindex="-1"><a class="header-anchor" href="#hashmap-的插入流程是怎么样的"><span>HashMap 的插入流程是怎么样的？</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230202162535098.png_char" alt="image-20230202162535098" tabindex="0" loading="lazy"><figcaption>image-20230202162535098</figcaption></figure><h3 id="插入流程的图里刚开始有个计算-key-的-hash-值-是怎么设计的" tabindex="-1"><a class="header-anchor" href="#插入流程的图里刚开始有个计算-key-的-hash-值-是怎么设计的"><span>插入流程的图里刚开始有个计算 key 的 hash 值，是怎么设计的？</span></a></h3><p>源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先执行<code>h = key.hashCode()</code>得到key的哈希值，并赋值给<code>h</code></li><li>在执行<code>(h &gt;&gt;&gt; 16)</code>，将得到的哈希值右移16位，因为<code>int</code>类型是4字节即32位，右移16位，可理解丢弃低16位，将高16位右移过来。</li><li>然后将原哈希值和右移后哈希值进行异或运算，得到最终的哈希值。</li></ol><p>❓为什么要让高16位参与运算？</p><p>主要是为了在 table 的长度（n）较小的时候，让高位也参与运算，并且不会有太大的开销。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>索引位置是通过刚刚的最终哈希值计算得到的，这样就间接使用到了高16位参与索引计算。</p><h3 id="hashmap-的容量必须是-2-的-n-次方-为什么这么设计" tabindex="-1"><a class="header-anchor" href="#hashmap-的容量必须是-2-的-n-次方-为什么这么设计"><span>HashMap 的容量必须是 2 的 N 次方，为什么这么设计</span></a></h3><p>核心目的是：实现节点均匀分布，减少 hash 冲突。当 n 不为 2 的 N 次方时，hash 冲突的概率会增大。</p><p>计算索引位置的公式为：<code>(n - 1) &amp; hash</code>，当 n 为 2 的 N 次方时，n - 1 为低位全是 1 的值，此时任何值跟 n - 1 进行 <code>&amp;</code> 与运算的结果为该值的低 N 位，达到了和取模同样的效果，实现了均匀分布。</p><p>实际上，这个设计就是基于公式：<code>x mod 2^n = x &amp; (2^n - 1)</code>，因为 &amp; 运算比 mod 具有更高的效率。</p><h3 id="大于等于该容量的最小的2的n次方-是怎么算的" tabindex="-1"><a class="header-anchor" href="#大于等于该容量的最小的2的n次方-是怎么算的"><span>大于等于该容量的最小的2的N次方”是怎么算的？</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先不看<code>int n = cap - 1</code>，先看下面的5行计算。</p><p><code>|=</code>（或等于）：这个符号比较少见，但是<code>+=</code>应该都见过，看到这你应该明白了。例如：a |= b ，可以转成：a = a | b。</p><figure><img src="http://images.xyzzs.top/image/image-20230202155704153.png_char" alt="image-20230202155704153" tabindex="0" loading="lazy"><figcaption>image-20230202155704153</figcaption></figure><p>&gt;&gt;&gt;（无符号右移）：例如 a &gt;&gt;&gt; b 指的是将 a 向右移动 b 指定的位数，右移后左边空出的位用零来填充，移出右边的位被丢弃。</p><figure><img src="http://images.xyzzs.top/image/image-20230202160244230.png_char" alt="image-20230202160244230" tabindex="0" loading="lazy"><figcaption>image-20230202160244230</figcaption></figure><p>假设 n 的值为 0010 0001，则该计算如下图：</p><figure><img src="http://images.xyzzs.top/image/image-20230202160407700.png_char_char" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看出来，这5个公式会通过最高位的1，拿到2个1、4个1、8个1、16个1、32个1。当然，有多少个1，取决于我们的入参有多大，但我们肯定的是经过这5个计算，得到的值是一个低位全是1的值，最后返回的时候 +1，则会得到1个比n 大的 2 的N次方。</p><p>核心思想：</p><ol><li>将最高位的<code>1</code>右边全部变成<code>1</code>，比如17（二进制是0001 0001）先执行<code>n |= n &gt;&gt;&gt; 1</code>则变成（0001 1001）</li><li>接着执行下一行代码<code>n |= n &gt;&gt;&gt; 2</code>则变成（0001 1111）</li><li><code>n |= n &gt;&gt;&gt; 4</code>,<code>n |= n &gt;&gt;&gt; 8</code>,<code>n |= n &gt;&gt;&gt; 16</code>，也会执行，但是17这个数字比较小，所以不影响结果</li><li>检查小于<code>0</code>，小于0则设置1；</li><li>检查是否达到最大值，若未达到最大值则 <code>n + 1</code>变成（0010 0000）即是32</li></ol><p>这时再看开头的 cap - 1 就很简单了，这是为了处理 cap 本身就是 2 的N次方的情况。</p><p>计算机底层是二进制的，移位和或运算是非常快的，所以这个方法的效率很高。</p><p>这操作，看不懂一头雾水，看懂了，只能膜拜作者，这是碳基生物能想的出来的？</p><h3 id="扩容流程-resize" tabindex="-1"><a class="header-anchor" href="#扩容流程-resize"><span>扩容流程（resize）</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230202164538767.png_char" alt="image-20230202164538767" tabindex="0" loading="lazy"><figcaption>image-20230202164538767</figcaption></figure><h3 id="红黑树和链表都是通过-e-hash-oldcap-0-来定位在新表的索引位置-这是为什么" tabindex="-1"><a class="header-anchor" href="#红黑树和链表都是通过-e-hash-oldcap-0-来定位在新表的索引位置-这是为什么"><span>红黑树和链表都是通过 e.hash &amp; oldCap == 0 来定位在新表的索引位置，这是为什么？</span></a></h3><p>因为 2 个节点在老表是同一个索引位置，因此计算新表的索引位置时，只取决于新表在高位多出来的这一位（图中标红），而这一位的值刚好等于 oldCap。</p><p>因为只取决于这一位，所以只会存在两种情况：</p><ol><li>(e.hash &amp; oldCap) == 0 ，则新表索引位置为“原索引位置” ；</li><li>(e.hash &amp; oldCap) != 0，则新表索引位置为“原索引 + oldCap 位置”。</li></ol><p>可以理解为以下的简单数学问题：假设先hash值为27，表的长度为4</p><ol><li>此时索引位置在：27 % 4 ==3</li><li>发生扩容长度变成8，那么可能在3或（3+4=7）上，实际在27 % 8 == 3（判断条件为是否==3）</li><li>发生扩容长度变成16，那么可能在3或（3+8=11）上，实际在27 % 16 == 11（判断条件为是否==3）</li><li>发生扩容长度变成32，那么可能在11或（11+16=27）上，实际在27 % 32 == 27（判断条件为是否==11）</li><li>继续扩容，依然满足。。。。</li></ol><h3 id="介绍一下死循环问题" tabindex="-1"><a class="header-anchor" href="#介绍一下死循环问题"><span>介绍一下死循环问题</span></a></h3><p>导致死循环的根本原因是 JDK 1.7 扩容采用的是“头插法”，会导致同一索引位置的节点在扩容后顺序反掉，在并发插入触发扩容时形成环，从而产生死循环。</p><p>而 JDK 1.8 之后采用的是“尾插法”，扩容后节点顺序不会反掉，不存在死循环问题。</p><h2 id="concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap"><span>ConcurrentHashMap</span></a></h2><p>JDK1.7：底层结构为：分段的数组+链表；实现线程安全的方式：分段锁（Segment，继承了ReentrantLock）</p><p>JDK1.8：底层结构为：数组+链表+红黑树；实现线程安全的方式：CAS + Synchronized</p><h3 id="concurrenthashmap-1-7" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-1-7"><span>ConcurrentHashMap 1.7</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230202201811871.png_char" alt="image-20230202201811871" tabindex="0" loading="lazy"><figcaption>image-20230202201811871</figcaption></figure><p>Java 7 中 ConcurrnetHashMap 的初始化逻辑。</p><ol><li>必要参数校验。</li><li>校验并发级别 <code>concurrencyLevel</code> 大小，如果大于最大值，重置为最大值。无参构造<strong>默认值是 16.</strong></li><li>寻找并发级别 <code>concurrencyLevel</code> 之上最近的 <strong>2 的幂次方</strong>值，作为初始化容量大小，<strong>默认是 16</strong>。</li><li>记录 <code>segmentShift</code> 偏移量，这个值为【容量 = 2 的N次方】中的 N，在后面 Put 时计算位置时会用到。<strong>默认是 32 - sshift = 28</strong>.</li><li>记录 <code>segmentMask</code>，默认是 ssize - 1 = 16 -1 = 15.</li><li><strong>初始化 <code>segments[0]</code></strong>，<strong>默认大小为 2</strong>，<strong>负载因子 0.75</strong>，<strong>扩容阀值是 2*0.75=1.5</strong>，插入第二个值时才会进行扩容。</li></ol><h3 id="concurrenthashmap-1-8" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-1-8"><span>ConcurrentHashMap 1.8</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230202201848899.png_char" alt="image-20230202201848899" tabindex="0" loading="lazy"><figcaption>image-20230202201848899</figcaption></figure><p><mark>initTable</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">//CAS获取锁</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                        sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>put</mark></p><ol><li>根据 key 计算出 hashcode 。</li><li>判断是否需要进行初始化。</li><li><code>no lock when adding to empty bin</code>即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>如果当前位置的 <code>hashcode == MOVED == -1</code>,则需要进行扩容。</li><li>如果都不满足，则利用 synchronized 锁写入数据。</li><li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要执行树化方法，在 <code>treeifyBin</code> 中会首先判断当前数组长度≥64时才会将链表转换为红黑树</li></ol><h3 id="_7和8的区别" tabindex="-1"><a class="header-anchor" href="#_7和8的区别"><span>7和8的区别</span></a></h3><p>1、JDK1.8 中降低锁的粒度。JDK1.7 版本锁的粒度是基于 Segment 的，包含多个节点（HashEntry），而 JDK1.8 锁的粒度就是单节点（Node）。</p><p>2、JDK1.8 版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用 synchronized 来进行同步，所以不需要分段锁的概念，也就不需要 Segment 这种数据结构了，当前还保留仅为了兼容。</p><p>3、JDK1.8 使用红黑树来优化链表，跟 HashMap 一样，优化了极端情况下，链表过长带来的性能问题。</p><p>4、JDK1.8 使用内置锁 synchronized 来代替重入锁 ReentrantLock，synchronized 是官方一直在不断优化的，现在性能已经比较可观，也是官方推荐使用的加锁方式。</p>`,63);function C(z,L){const e=o("ExternalLinkIcon");return c(),l("div",null,[r,n("ul",null,[u,n("li",null,[d,a("： "),k,a(" 继承自 "),m,a("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),h,a(" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看："),n("a",v,[a("《LinkedHashMap 源码详细分析（JDK1.8）》"),t(e)])])]),g,n("ul",null,[n("li",null,[b,a(" 是一个标志接口，表明实现这个接口的 List 集合是支持"),y,a("的。在 "),w,a(" 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。什么是随机访问，"),n("a",f,[a("详情查看"),t(e)]),a("。")]),_]),A])}const E=p(i,[["render",C],["__file","collection.html.vue"]]),j=JSON.parse('{"path":"/java/collection.html","title":"集合导航栏","lang":"zh-CN","frontmatter":{"description":"集合导航栏 image-20230203194621727image-20230203194621727 集合框架底层数据结构总结 先来看一下 Collection 接口下面的集合。 List ArrayList： Object[] 数组 Vector：Object[] 数组 LinkedList： 双向链表(JDK1.6 之前为循环链表，JDK1.7...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/java/collection.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"集合导航栏"}],["meta",{"property":"og:description","content":"集合导航栏 image-20230203194621727image-20230203194621727 集合框架底层数据结构总结 先来看一下 Collection 接口下面的集合。 List ArrayList： Object[] 数组 Vector：Object[] 数组 LinkedList： 双向链表(JDK1.6 之前为循环链表，JDK1.7..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.xyzzs.top/image/image-20230203194621727.png_char"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合导航栏\\",\\"image\\":[\\"http://images.xyzzs.top/image/image-20230203194621727.png_char\\",\\"http://images.xyzzs.top/image/image-20230202162535098.png_char\\",\\"http://images.xyzzs.top/image/image-20230202155704153.png_char\\",\\"http://images.xyzzs.top/image/image-20230202160244230.png_char\\",\\"http://images.xyzzs.top/image/image-20230202160407700.png_char_char\\",\\"http://images.xyzzs.top/image/image-20230202164538767.png_char\\",\\"http://images.xyzzs.top/image/image-20230202201811871.png_char\\",\\"http://images.xyzzs.top/image/image-20230202201848899.png_char\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"集合框架底层数据结构总结","slug":"集合框架底层数据结构总结","link":"#集合框架底层数据结构总结","children":[]},{"level":3,"title":"如何选用集合?","slug":"如何选用集合","link":"#如何选用集合","children":[]},{"level":2,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[{"level":3,"title":"Arraylist 和 Vector 的区别?","slug":"arraylist-和-vector-的区别","link":"#arraylist-和-vector-的区别","children":[]}]},{"level":2,"title":"HashMap","slug":"hashmap","link":"#hashmap","children":[{"level":3,"title":"HashMap 的插入流程是怎么样的？","slug":"hashmap-的插入流程是怎么样的","link":"#hashmap-的插入流程是怎么样的","children":[]},{"level":3,"title":"插入流程的图里刚开始有个计算 key 的 hash 值，是怎么设计的？","slug":"插入流程的图里刚开始有个计算-key-的-hash-值-是怎么设计的","link":"#插入流程的图里刚开始有个计算-key-的-hash-值-是怎么设计的","children":[]},{"level":3,"title":"HashMap 的容量必须是 2 的 N 次方，为什么这么设计","slug":"hashmap-的容量必须是-2-的-n-次方-为什么这么设计","link":"#hashmap-的容量必须是-2-的-n-次方-为什么这么设计","children":[]},{"level":3,"title":"大于等于该容量的最小的2的N次方”是怎么算的？","slug":"大于等于该容量的最小的2的n次方-是怎么算的","link":"#大于等于该容量的最小的2的n次方-是怎么算的","children":[]},{"level":3,"title":"扩容流程（resize）","slug":"扩容流程-resize","link":"#扩容流程-resize","children":[]},{"level":3,"title":"红黑树和链表都是通过 e.hash & oldCap == 0 来定位在新表的索引位置，这是为什么？","slug":"红黑树和链表都是通过-e-hash-oldcap-0-来定位在新表的索引位置-这是为什么","link":"#红黑树和链表都是通过-e-hash-oldcap-0-来定位在新表的索引位置-这是为什么","children":[]},{"level":3,"title":"介绍一下死循环问题","slug":"介绍一下死循环问题","link":"#介绍一下死循环问题","children":[]}]},{"level":2,"title":"ConcurrentHashMap","slug":"concurrenthashmap","link":"#concurrenthashmap","children":[{"level":3,"title":"ConcurrentHashMap 1.7","slug":"concurrenthashmap-1-7","link":"#concurrenthashmap-1-7","children":[]},{"level":3,"title":"ConcurrentHashMap 1.8","slug":"concurrenthashmap-1-8","link":"#concurrenthashmap-1-8","children":[]},{"level":3,"title":"7和8的区别","slug":"_7和8的区别","link":"#_7和8的区别","children":[]}]}],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":11.92,"words":3577},"filePathRelative":"java/collection.md","localizedDate":"2024年4月24日","autoDesc":true}');export{E as comp,j as data};
