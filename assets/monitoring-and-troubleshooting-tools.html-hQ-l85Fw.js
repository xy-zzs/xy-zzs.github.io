import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as d,c as r,a as e,b as a,d as l,w as o,f as t}from"./app-CoZ3ixxr.js";const p={},u=t('<h1 id="监控及调优导航栏" tabindex="-1"><a class="header-anchor" href="#监控及调优导航栏"><span>监控及调优导航栏</span></a></h1><p>背景说明：生产中的问题</p><ol><li>生产环境发生了溢出如何处理</li><li>生产环境应该给服务器分配多少内存合适</li><li>如何对垃圾收集器的性能调优</li><li>不加log如何确定请求是否执行了某一行代码：Btrace</li><li>不加log如何实时查看某个方法的入参与返回值：Btrace</li></ol><p><mark>性能评价/测试指标</mark></p>',4),m=e("p",null,"停顿时间：",-1),h=e("strong",null,"STW",-1),g=e("li",null,[e("p",null,"测试阶段中，指提交请求和返回该请求的响应之间使用的时间，一般比较关注平均响应时间。常用操作的响应时间列表：")],-1),v=t("<table><thead><tr><th>操作</th><th>响应时间</th></tr></thead><tbody><tr><td>打开一个站点</td><td>几秒</td></tr><tr><td>数据库查询一条记录</td><td>十几毫秒</td></tr><tr><td>机械磁盘一次寻址定位</td><td>4毫秒</td></tr><tr><td>从机械磁盘顺序读取 1M 数据</td><td>2毫秒</td></tr><tr><td>从SSD 磁盘顺序读取 1M 数据</td><td>0.3毫秒</td></tr><tr><td>从内存读取 1M 数据</td><td>十几微妙</td></tr><tr><td>Java 程序本地方法调用</td><td>几微妙</td></tr><tr><td>网络传输2Kb 数据</td><td>1微妙</td></tr></tbody></table>",1),_=e("li",null,[e("p",null,"吞吐量：对单位时间内完成的工作量（请求）的量度")],-1),k=e("li",null,[e("p",null,"并发数：同一时刻，对服务器有实际交互的请求数")],-1),b=e("li",null,[e("p",null,"内存占用：Java 堆区所占的内存大小")],-1),f=t('<p><mark>性能优化的步骤</mark></p><ol><li>性能监控</li><li>性能分析</li><li>性能调优</li></ol><h2 id="jvm监控及诊断工具" tabindex="-1"><a class="header-anchor" href="#jvm监控及诊断工具"><span>JVM监控及诊断工具</span></a></h2><h3 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行"><span>命令行</span></a></h3><p><mark>jps</mark></p>',5),j=e("code",null,"jps",-1),X=e("code",null,"ps",-1),M=e("ul",null,[e("li",null,[e("p",null,[e("code",null,"jps -v"),a("：输出虚拟机进程启动时 JVM 参数。")])]),e("li",null,[e("p",null,[e("code",null,"jps -m"),a("：输出传递给 Java 进程 main() 函数的参数。")])])],-1),C=e("p",null,[e("mark",null,"jstat")],-1),x=e("code",null,"jstat",-1),J=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jstat -<span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-t<span class="token punctuation">]</span> <span class="token punctuation">[</span>-h<span class="token operator">&lt;</span>lines<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>vmid<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>interval<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>count<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如 <code>jstat -gc -h3 18140 1000 10</code>表示分析进程 id 为 18140的 gc 情况，每隔 1000ms 打印一次记录，打印 10 次停止，每 3 行后打印指标头部。</p><figure><img src="http://images.xyzzs.top/image/image-20230205094851118.png_char_char" alt="image-20230205094851118" tabindex="0" loading="lazy"><figcaption>image-20230205094851118</figcaption></figure><p>新生代相关：</p><ul><li>S0C 是第一个幸存者区的大小(字节)</li><li>S1C 是第二个幸存者区的大小(字节)</li><li>S0U 是第一个幸存者区已使用的大小(字节)</li><li>S1U 是第二个幸存者区已使用的大小 (字节)</li><li>EC 是Eden空间的大小(字节)</li><li>EU 是Eden空间已使用大小(字节)</li></ul><p>老年代相关：</p><ul><li>OC 是老年代的大小(字节)</li><li>OU 是老年代已使用的大小(字节)</li></ul><p>方法区(元空间)相关：</p><ul><li>MC 是方法区的大小</li><li>MU 是方法区已使用的大小</li><li>CCSC 是压缩类空间的大小</li><li>CCSU 是压缩类空间已使用的大小</li></ul><p>其它：</p><ul><li>YGC 是指从应用程序启动到采样时 young gc 次数</li><li>YGCT 是指从应用程序启动到采样时 youn gc 消耗的时间(秒)</li><li>FGC 是指从应用程序启动到采样时 full gc 次数</li><li>FGCT 是指从应用程序启动到采样时 full gc 消耗的时间(秒)</li><li>GCT 是指从应用程序启动到采样时 gc 的总时间</li></ul><p><strong>常见的 option 如下：</strong></p><p><code>jstat -class vmid</code> ：显示 ClassLoader 的相关信息；</p><p><code>jstat -compiler vmid</code> ：显示 JIT 编译的相关信息；</p><p><code>jstat -gc vmid</code> ：显示与 GC 相关的堆信息；</p><p><code>jstat -gccapacity vmid</code> ：显示各个代的容量及使用情况；</p><p><code>jstat -gcnew vmid</code> ：显示新生代信息；</p><p><code>jstat -gcnewcapcacity vmid</code> ：显示新生代大小与使用情况；</p><p><code>jstat -gcold vmid</code> ：显示老年代和永久代的行为统计，从jdk1.8开始,该选项仅表示老年代，因为永久代被移除了；</p><p><code>jstat -gcoldcapacity vmid</code> ：显示老年代的大小；</p><p><code>jstat -gcpermcapacity vmid</code> ：显示永久代大小，从jdk1.8开始,该选项不存在了，因为永久代被移除了；</p><p><code>jstat -gcutil vmid</code> ：显示垃圾收集信息；</p><p><mark>jinfo</mark></p>`,23),y=e("code",null,"jinfo",-1),G=t(`<p><code>jinfo vmid</code> :输出当前 jvm 进程的全部参数和系统属性 (第一部分是系统的属性，第二部分是 JVM 的参数)。</p><p><code>jinfo -flag name vmid</code> :输出对应名称的参数的具体值。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//输出 MaxHeapSize
jinfo <span class="token parameter variable">-flag</span> MaxHeapSize <span class="token number">18140</span>
<span class="token parameter variable">-XX:MaxHeapSize</span><span class="token operator">=</span><span class="token number">2124414976</span>

//查看当前 jvm 进程是否开启打印 GC 日志
jinfo <span class="token parameter variable">-flag</span> PrintGC <span class="token number">18140</span>
<span class="token parameter variable">-XX:-PrintGC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>jinfo -flag [+|-]name vmid</code> 开启或者关闭对应名称的参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>//开启PrintGC功能
jinfo  <span class="token parameter variable">-flag</span>  +PrintGC <span class="token number">17340</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，并非所有参数都支持动态修改。参数只有被标记为 manageable 的 flag 可以被实时修改。查看被标记为manageable的参数</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> manageable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>jmap</mark></p>`,8),S=e("code",null,"jmap",-1),V=e("code",null,"jmap",-1),T=e("code",null,"“-XX:+HeapDumpOnOutOfMemoryError”",-1),z=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-Xmx100m</span> <span class="token parameter variable">-XX:+HeapDumpOnOutofMemoryError</span> <span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span><span class="token punctuation">..</span>./m.hprof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),P=e("li",null,[e("p",null,[a("Linux 命令下可以通过 "),e("code",null,"kill -3"),a(" 发送进程退出信号也能拿到 dump 文件。")])],-1),O=t(`<p><code>jmap</code> 的作用并不仅仅是为了获取 dump 文件，它还可以查询 finalizer 执行队列、Java 堆和永久代的详细信息，如空间使用率、当前使用的是哪种收集器等。和<code>jinfo</code>一样，<code>jmap</code>有不少功能在 Windows 平台下也是受限制的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span><span class="token punctuation">..</span>./heap.hprof <span class="token number">18140</span>
Dumping heap to <span class="token punctuation">..</span>./heap.hprof <span class="token punctuation">..</span>.
Heap dump <span class="token function">file</span> created
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jstat -<span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-t<span class="token punctuation">]</span> <span class="token punctuation">[</span>-h<span class="token operator">&lt;</span>lines<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>vmid<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>interval<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>count<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>&lt;option&gt;</code>包括</p><ul><li><code> -dump</code>：生成dump文件；<code>-dump:live</code>只保存堆中的存活对象</li><li><code>-heap</code>：输出整个堆空间的详细信息，包括GC的使用、堆配置信息，以及内存的使用信息等</li><li><code>-histo</code>：输出堆空间中对象的统计信息，包括类、实例数量和合计容量</li><li><code>-permstat</code>：以ClassLoader为统计口径输出永久代的内存状态信息；仅linux/solaris平台有效</li><li><code>-finalizerinfo</code>：以ClassLoader为统计口径输出永久代的内存状态信息；仅linux/solaris平台有效</li><li><code>-F</code>：当虚拟机进程对-dump选项没有任何响应时，强制执行生成dump文件；仅linux/solaris平台有效</li></ul><p><mark>jhat</mark></p>`,6),D=e("strong",null,[e("code",null,"jhat")],-1),H=e("p",null,"jhat命令在JDK9、JDK10中已经被删除，官方建议用VisualVM代替。",-1),w=e("p",null,[e("mark",null,"jstack")],-1),F=e("code",null,"jstack",-1),N=t("<p>生成线程快照的作用：可用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等问题。这些都是导致线程长时间停顿的常见原因。当线程出现停顿时，就可以用istack显示各个线程调用的堆栈情况。</p><p>在thread dump中，要留意下面几种状态：</p><ul><li>死锁，Deadlock（重点关注）</li><li>等待资源，Waiting on condition （重点关注）</li><li>等待获取监视器，Waiting on monitor entry （重点关注）</li><li>阻塞，Blocked ( 重点关注）</li><li>执行中，Runnable</li><li>暂停，Suspended</li></ul><p><mark>jcmd</mark></p>",4),B=e("p",null,[a("在JDK 1.7以后，新增了一个命令行工具"),e("code",null,"jcmd"),a("。它是一个多功能的工具，可以用来实现前面除了"),e("code",null,"jstat"),a("之外所有命令的功能。比如: 用它来导出堆、内存使用、查看Java进程、导出线程信息、执行GC、JVM运行时间等。")],-1),E=e("p",null,[e("mark",null,"jstatd")],-1),I=t('<p>之前的指令只涉及到监控本机的 Java 应用程序，而在这些工具中，一些监控工具也支持对远程计算机的监控(如 jps 、 jstat ) 。为了启用远程监控，则需要配合使用<code>jstatd</code> 工具。 命令<code>jstatd</code>是一个RMI服务端程序，它的作用相当于代理服务器，建立本地计算机与远程监控工具的通信。<code>jstatd</code>服务器将本机的 Java 应用程序信息传递到远程计算机。</p><h3 id="jconsole" tabindex="-1"><a class="header-anchor" href="#jconsole"><span>jconsole</span></a></h3><p>Jconsole （Java Monitoring and Management Console），一种基于JMX的可视化监视、管理工具。</p><p>启动：点击JDK/bin 目录下面的<code>jconsole.exe</code> 即可启动。<code>Jconsole </code>命令行也可启动</p><p>JConsole 基本包括以下基本功能：<code>概述</code>、<code>内存</code>、<code>线程</code>、<code>类</code>、<code>VM概要</code>、<code>MBean</code></p><figure><img src="http://images.xyzzs.top/image/image-20230205105344536.png_char" alt="image-20230205105344536" tabindex="0" loading="lazy"><figcaption>image-20230205105344536</figcaption></figure><h3 id="visual-vm" tabindex="-1"><a class="header-anchor" href="#visual-vm"><span>Visual VM</span></a></h3><p>VisualVM（All-in-One Java Troubleshooting Tool）;功能最强大的运行监视和故障处理程序</p><p>启动：点击JDK/bin 目录下面的<code>jvisualvm.exe</code> 即可启动。<code>jvisualvm</code>命令行也可启动。</p><p>Visual VM 官网：https://visualvm.github.io/ 。Visual VM 中文文档:https://visualvm.github.io/documentation.html。</p><p>其他可视化工具</p>',11),A={href:"https://www.ej-technologies.com/download/jprofiler/files",target:"_blank",rel:"noopener noreferrer"},K={href:"https://arthas.aliyun.com/doc/",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,"eclipse MAT",-1),U=e("li",null,"Java Mission Control（JMC）—JDK自带",-1),L={href:"https://blog.csdn.net/qq2430/article/details/82528767",target:"_blank",rel:"noopener noreferrer"},W=e("li",null,"Flame Graphs (火焰图)",-1),Y=e("li",null,"Tprofiler",-1),Z=e("li",null,"YourKit",-1),q=e("li",null,"JProbe",-1),Q=e("li",null,"Spring Insight",-1),$=t(`<h2 id="jvm常用参数" tabindex="-1"><a class="header-anchor" href="#jvm常用参数"><span>JVM常用参数</span></a></h2><h3 id="jvm参数选项类型" tabindex="-1"><a class="header-anchor" href="#jvm参数选项类型"><span>JVM参数选项类型</span></a></h3><p>标准参数：<code>java -help</code>，比较稳定，基本上改动</p><p>-X参数：<code>java -X</code></p><p>-XX参数：格式如下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span>1024m		//设置数值
<span class="token parameter variable">-XX:+printFlagsFinal</span>  //表示启用
<span class="token parameter variable">-XX:-printFlagsFinal</span>  //表示禁用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打印设置的参数" tabindex="-1"><a class="header-anchor" href="#打印设置的参数"><span>打印设置的参数</span></a></h3><ul><li><code>-XX:PrintFlagsInitial</code>：打印初始值</li><li><code>-XX:PrintCommandlineFlags</code>：打印当前生效的值</li><li><code>-XX:PrintVMOptions</code>：打印JVM参数</li></ul><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><ul><li><code>-Xss128</code>：每个线程栈的大小128k</li></ul><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h3><ul><li><code>-Xms3550m</code>：设置 JVM 初始堆内存为3550M</li><li><code>-Xmx3550m</code>：设置 JVM 最大堆内存为3550M</li><li><code>-Xmn2g</code>：设置 JVM 年轻代大小为2G</li><li><code>-XX:NewSize=1024m</code>：设置年轻代初始值为1024M</li><li><code>-XX:MaxNewSize=1024m</code>：设置年轻代最大值为1024M</li><li><code>-XX:SurvivorRatio=8</code>：设置Eden与sur区的比值</li><li><code>-XX:+UserAdaptSizePolicy</code>：自动选择各区大小比例</li><li><code>-XX:NewRatio=4</code>：设置老年代与年轻的比值</li><li><code>-XX:PretenureSizeThreadshold=1024</code>：设置大于此阈值的对象直接分配到老年代，单位是字节</li><li><code>-XX:MaxTenuringThreadshold=15</code>：达到此年龄，进入老年代</li><li><code>-XX:+PrintTenuringDistribution</code>：让JVM每次Minor GC后打印当前 Survivor 区中对象的年龄分布</li><li><code>-XX:TargetSurvivorRatio=</code>：表示 Minor GC 后 Survivor 区中占有的期望比例</li><li>CNewRatio二4的大书酒公大，yoeghto s黄生存活的对象年龄+1，当对象的年龄大于设置的这个值时就进入老. Teugeo让NM在每次MinorGC后打印出当前使用的Suvivor中对象的年-xcTargetsurvivoRatio表示Minorc结束后SuMwor区域中占用空国的期组比</li></ul><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h3><p>永久代</p><ul><li><code>-XX:PermSize=256m</code>：设置永久代初始值为256M</li><li><code>-XX:MaxPermSize=256m</code>：设置永久代最大值为256M</li></ul><p>元空间</p><ul><li><code>-XX:MetaspaceSize=256m</code>：设置元空间初始值为256M</li><li><code>-XX:MaxMetaspaceSize=256m</code>：设置元空间最大值为256M</li></ul><h3 id="oom相关" tabindex="-1"><a class="header-anchor" href="#oom相关"><span>OOM相关</span></a></h3><ul><li><code>-XX:+HeapDumpOnOutOfMemoryError</code>表示在内存出现OOM的时候，把Heap转存(Dump)到文件以便后续分析</li><li><code>-XX:+HeapDumpBeforeFullGC</code>：表示在出现 FulIGC 之前，生成Heap转储文件</li><li><code>-XX:HeapDumpPath=&lt;path&gt;</code>指定heap转存文件的存储路径</li><li><code>-XX:OnOutOfMemoryError</code>指定一个可行性程序或者脚本的路径，当发生OOM的时候，去执行这个脚本</li></ul><h3 id="gc相关" tabindex="-1"><a class="header-anchor" href="#gc相关"><span>GC相关</span></a></h3><ul><li><code>-verbosegc</code>：输出简化的gc日志信息用</li><li><code>-XX:+PrintGC</code>：输出简化的gc日志信息用</li><li><code>-XX:+PrintGCDetails</code>：在发生垃圾回收时打印内存回收详细的日志并在进程退出时输出当前内存各区域分配情况</li><li><code>-XX:+PrintGCTimeStamps</code>：输出GC发生时的时间戳，不可以独立使用，需要配合-XX:+PrintGCDetails使用</li><li><code>-XX:+PrintGCDateStamps</code>：输出GC发生时的时间戳，不可以独立使用，需要配合-XX:+PrintGCDetails使用输出GC发生时的时间戳(以日期的形式，如2013-</li><li><code>-XX:+PrintHeapAtGC</code>：每一次GC前和GC后，都打印堆信息</li><li><code>-Xloggc:&lt;file&gt;</code>：把GC日志写入到一个文件中去，而不是打印到标准输出中</li></ul><p><mark>GC日志分析工具</mark></p>`,22),ee={href:"https://gceasy.io/",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://github.com/chewiebug/GCViewer",target:"_blank",rel:"noopener noreferrer"},le=e("li",null,"GChisto",-1),ne=e("li",null,"Hpjmeter",-1);function oe(te,se){const n=i("font"),s=i("ExternalLinkIcon");return d(),r("div",null,[u,e("ol",null,[e("li",null,[m,e("ul",null,[e("li",null,[e("p",null,[a("在垃圾回收环节中，停顿时间指"),l(n,{color:"red"},{default:o(()=>[a("执行垃圾收集时，程序的工作线程被暂停")]),_:1}),a(),h,a("的时间。")])]),g]),v]),_,k,b]),f,e("p",null,[j,a("(JVM Process Status) 可以"),l(n,{color:"orchid"},{default:o(()=>[a("查看所有 Java 进程")]),_:1}),a("，命令类似 UNIX 的 "),X,a(" 命令。")]),M,C,e("p",null,[x,a("（JVM Statistics Monitoring Tool） 使用于"),l(n,{color:"orchid"},{default:o(()=>[a("监控虚拟机各种运行状态信息")]),_:1}),a("的命令行工具。")]),J,e("p",null,[y,a("（Configuration Info for Java）"),l(n,{color:"orchid"},{default:o(()=>[a("实时地查看和调整虚拟机各项参数")]),_:1})]),G,e("p",null,[S,a("（Memory Map for Java）命令用于"),l(n,{color:"orchid"},{default:o(()=>[a("生成堆转储快照")]),_:1}),a("。 如果不使用 "),V,a(" 命令，要想获取 Java 堆转储")]),e("ul",null,[e("li",null,[e("p",null,[a("可以使用 "),T,a(" 参数，可以让虚拟机"),l(n,{color:"orchid"},{default:o(()=>[a("在 OOM 异常出现之后自动生成 dump 文件")]),_:1}),a("。-XX:HeapDumpPath: 可以指定堆快照的保存位置。")]),z]),P]),O,e("p",null,[D,a(" （JVM Heap Analysis Tool）是jdk自带"),l(n,{color:"orchid"},{default:o(()=>[a("堆分析工具")]),_:1}),a("，用于分析 heapdump 文件，jhat内置了一个微型的 HTTP/HTML 服务器， 生成dump文件的分析结果后，用户可以在浏览器中查看分析结果。")]),H,w,e("p",null,[F,a("（Stack Trace for Java）命令用于生成虚拟机"),l(n,{color:"orchid"},{default:o(()=>[a("当前时刻的线程快照")]),_:1}),a("。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合。")]),N,l(n,{color:"orchid"},{default:o(()=>[a("多功能命令行工具")]),_:1}),B,E,l(n,{color:"orchid"},{default:o(()=>[a("远程主机信息收集")]),_:1}),I,e("ul",null,[e("li",null,[e("a",A,[a("Jprofiler"),l(s)])]),e("li",null,[e("a",K,[a("Arthas"),l(s)])]),R,U,e("li",null,[a("其他分析工具： "),e("ul",null,[e("li",null,[e("a",L,[a("BTrace 快速入门"),l(s)])]),W,Y,Z,q,Q])])]),$,e("ul",null,[e("li",null,[e("a",ee,[a("GCEasy"),l(s)]),a("：在线版")]),e("li",null,[a("GCViewer：离线版，需先"),e("a",ae,[a("下载"),l(s)])]),le,ne])])}const de=c(p,[["render",oe],["__file","monitoring-and-troubleshooting-tools.html.vue"]]),re=JSON.parse('{"path":"/jvm/monitoring-and-troubleshooting-tools.html","title":"监控及调优导航栏","lang":"zh-CN","frontmatter":{"description":"监控及调优导航栏 背景说明：生产中的问题 生产环境发生了溢出如何处理 生产环境应该给服务器分配多少内存合适 如何对垃圾收集器的性能调优 不加log如何确定请求是否执行了某一行代码：Btrace 不加log如何实时查看某个方法的入参与返回值：Btrace 性能评价/测试指标 停顿时间： 在垃圾回收环节中，停顿时间指 STW的时间。 测试阶段中，指提交请求...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/jvm/monitoring-and-troubleshooting-tools.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"监控及调优导航栏"}],["meta",{"property":"og:description","content":"监控及调优导航栏 背景说明：生产中的问题 生产环境发生了溢出如何处理 生产环境应该给服务器分配多少内存合适 如何对垃圾收集器的性能调优 不加log如何确定请求是否执行了某一行代码：Btrace 不加log如何实时查看某个方法的入参与返回值：Btrace 性能评价/测试指标 停顿时间： 在垃圾回收环节中，停顿时间指 STW的时间。 测试阶段中，指提交请求..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.xyzzs.top/image/image-20230205094851118.png_char_char"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控及调优导航栏\\",\\"image\\":[\\"http://images.xyzzs.top/image/image-20230205094851118.png_char_char\\",\\"http://images.xyzzs.top/image/image-20230205105344536.png_char\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"JVM监控及诊断工具","slug":"jvm监控及诊断工具","link":"#jvm监控及诊断工具","children":[{"level":3,"title":"命令行","slug":"命令行","link":"#命令行","children":[]},{"level":3,"title":"jconsole","slug":"jconsole","link":"#jconsole","children":[]},{"level":3,"title":"Visual VM","slug":"visual-vm","link":"#visual-vm","children":[]}]},{"level":2,"title":"JVM常用参数","slug":"jvm常用参数","link":"#jvm常用参数","children":[{"level":3,"title":"JVM参数选项类型","slug":"jvm参数选项类型","link":"#jvm参数选项类型","children":[]},{"level":3,"title":"打印设置的参数","slug":"打印设置的参数","link":"#打印设置的参数","children":[]},{"level":3,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":3,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":3,"title":"方法区","slug":"方法区","link":"#方法区","children":[]},{"level":3,"title":"OOM相关","slug":"oom相关","link":"#oom相关","children":[]},{"level":3,"title":"GC相关","slug":"gc相关","link":"#gc相关","children":[]}]}],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":10.12,"words":3035},"filePathRelative":"jvm/monitoring-and-troubleshooting-tools.md","localizedDate":"2024年4月24日","autoDesc":true}');export{de as comp,re as data};
