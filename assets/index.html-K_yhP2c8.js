import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as n,c as l,a,b as t,d as o,w as s,e as c,f as d}from"./app-CoZ3ixxr.js";const g={},m=d('<h1 id="mq通用导航栏" tabindex="-1"><a class="header-anchor" href="#mq通用导航栏"><span>MQ通用导航栏</span></a></h1><table><thead><tr><th>特点</th><th>RabbitMQ</th><th>ActiveMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>资料文档</td><td>资料数量多</td><td>资料数量多</td><td>资料数量中等</td><td>资料数量少，建议去官网上看，现成的demo倒是很方便</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Scala</td><td>Java</td></tr><tr><td>支持的协议</td><td>AMQP</td><td>OpenWire、STOMP、REST、XMPP、AMQP</td><td>自己定义的（基于TCP）</td><td>自己定义的</td></tr><tr><td>消息存储</td><td>内存、磁盘。支持少量堆积</td><td>内存、磁盘、数据库。支持少量堆积。</td><td>内存、磁盘、数据库。支持大量堆积</td><td>磁盘。支持大量堆积。</td></tr><tr><td>消息事务</td><td>支持。客户端将信道设置为事务模式，只有当消息被RabbitMQ接收，事务才能提交成功，否则在捕获异常后进行回滚。使用事务会使得性能有所下降</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>负载均衡</td><td>负载均衡的支持不好</td><td>支持负载均衡。基于zookeeper实现负载均衡。</td><td>支持</td><td>支持</td></tr><tr><td>集群方式</td><td>支持简单集群，&#39;复制&#39;模式，对高级集群模式支持不好。</td><td>支持简单集群模式，比如&#39;主-备&#39;，对高级集群模式支持不好。</td><td>天然的‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。</td><td>常用 多对&#39;Master-Slave&#39; 模式，开源版本需手动切换Slave变成Master。</td></tr><tr><td>管理界面</td><td>好</td><td>一般</td><td>一般</td><td>有管理后台, 但不是项目里自带, 需要自己启动一个单独的管理后台实例</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>消息重复</td><td>支持at least once、at most once</td><td>支持at least once</td><td>支持at least once、at most once</td><td>支持at least once</td></tr><tr><td>单机吞吐量（TPS）</td><td>万级（其次）</td><td>万级（最差）</td><td>十万级（最大），Kafka按批次发送消息和消费消息。发送端将多个小消息合并，批量发向Broker，消费端每次取出一个批次的消息批量处理。</td><td>十万级（其次），RocketMQ接收端可以批量消费消息，可以配置每次消费的消息数，但是发送端不是批量发送。</td></tr><tr><td>顺序消息</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>消息回溯</td><td>不支持</td><td>不支持</td><td>支持指定分区offset位置的回溯</td><td>支持指定分区offset位置的回溯</td></tr><tr><td>消息重试</td><td>不支持，但是可以利用消息确认机制实现。</td><td>不支持</td><td>不支持，但是可以利用消息确认机制实现</td><td>支持</td></tr></tbody></table><h2 id="怎么防止消息不丢失" tabindex="-1"><a class="header-anchor" href="#怎么防止消息不丢失"><span>怎么防止消息不丢失</span></a></h2><figure><img src="http://images.xyzzs.top/image/image-20230201140325339.png_char_char" alt="image-20230201140325339" tabindex="0" loading="lazy"><figcaption>image-20230201140325339</figcaption></figure><p>一次正常完整的发送消息可以分为三个阶段，分别是<strong>生产消息、存储消息和消费消息</strong>。我们从这三个阶段分别入手来看看如何确保消息不会丢失。</p><p><mark>生产者发送消息不丢失</mark></p><p>生产者发送消息至<code>Broker</code>，需要处理<code>Broker</code>的响应，不论是同步还是异步发送消息，同步和异步回调都需要做好<code>try-catch</code>，妥善的处理响应，如果<code>Broker</code>返回写入失败等错误消息，需要重试发送。当多次发送失败需要作报警，日志记录等。</p><p>常见MQ实现方式</p><ol><li><p>RabbitMQ</p><ul><li><p>消息发送+回调；</p></li><li><p>手动事务：channel.txSelect()开启事务，channel.txCommit()提交事务，channel.txRollback()回滚事务。这种方式对channel会产生阻塞，造成吞吐量下降。</p></li><li><p>publisher Confirm，整个处理流程跟RocketMQ的事务消息基本一致</p></li></ul></li><li><p>RocketMQ：</p></li><li><ol><li>消息发送+回调</li><li>事务消息，流程如下图</li></ol></li></ol><figure><img src="http://images.xyzzs.top/image/1668773364658-b3629a0e-a14b-4376-bafb-f3377a17285d.png_char" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><mark>MQ消息存盘不丢失</mark></p><p>RocketMQ：同步刷盘和异步刷盘，异步刷盘效率更高，但是有可能丢消息；同步刷盘消息安全性更高，但是效率会降低。</p><p>RabbitMQ：将队列配置成持久化队列。新增的Quorum类型队列，会采用Raft协议来进行消息同步。</p><p><mark>消费者消费消息不丢失</mark></p><p>RocketMQ：使用默认的方式消费就行，不要采用异步方式</p><p>RabbitMQ：autoCommit -&gt; 手动提交offset</p>',16),h={href:"https://blog.csdn.net/qq_19734597/article/details/119152030",target:"_blank",rel:"noopener noreferrer"},k=d('<blockquote><p>特殊情况下：可能还需要保证<mark>MQ主从消息同步不丢失</mark></p><p>RocketMQ</p><ol><li>普通集群，同步同步、异步同步。异步同步效率更高，但有风险丢失消息，同步同步 就不会丢消息。</li><li>2Dledger集群：两阶段提交</li></ol><p>RabbitMQ</p><ol><li>普通集群：消息是分散存储的，节点之间不会主动进行消息同步，是有可能丢失消息的</li><li>镜像集群：会在节点之间主动进行数据同步，这样数据安全性得到提高</li></ol></blockquote><h2 id="如何保证消息消费的幂等性-重复消费" tabindex="-1"><a class="header-anchor" href="#如何保证消息消费的幂等性-重复消费"><span>如何保证消息消费的幂等性（重复消费）</span></a></h2><p>其实就是要防止消费者重复消费消息的问题。</p><blockquote><p>**幂等（idempotent、idempotence）**是一个数学与计算机学概念，常见于抽象代数中。在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“setTrue()”函数就是一个幂等函数,**无论多次执行，其结果都是一样的.**更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p></blockquote><p>所有MQ产品并没有提供主动解决幂等性的机制，需要由消费者自行控制。</p><p>RocketMQ：给每个消息分配了个MessageID，这个MessageID可以作为消费者判断幂等性的依据，这种方式不太建议。</p><p>最好的方式是自己带一个有业务标识的ID，来进行幂等判断。（orderID，统一ID分配）</p><p><strong>分场景去考虑</strong>，看是<strong>强校验</strong>还是<strong>弱校验</strong></p><h2 id="如何保证消息的顺序" tabindex="-1"><a class="header-anchor" href="#如何保证消息的顺序"><span>如何保证消息的顺序</span></a></h2><p>全局有序和局部有序：MQ只需要保证局部有序，不需要保证全局有序</p><p>RocketMQ：<strong>1生产者把一组有序的消息放在同一个队列，2而消费者一次消费整个队列当中的消息。</strong></p><figure><img src="http://images.xyzzs.top/image/1668776845504-22ae4417-ac73-4f1e-93c2-2101cb77e163.png_char" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先需要给这些消息一个相同的id，也可用已有的字段如订单号，一个订单的肯定是一个订单号的说，那简单了呀。</p><p><strong>一个topic下有多个队列</strong>，为了保证发送有序，<strong>RocketMQ</strong>提供了<strong>MessageQueueSelector</strong>队列选择机制，他有三种实现：</p><p>我们可使用<strong>Hash取模法</strong>，让同一个订单发送到同一个队列中，再使用同步发送，只有同个订单的创建消息发送成功，再发送支付消息。这样，我们保证了发送有序。RocketMQ的topic内的队列机制，可以保证存储满足FIFO，剩下的只需要消费者顺序消费即可。</p><p><strong>RocketMQ</strong>仅保证顺序发送，顺序消费由消费者业务保证。</p><figure><img src="http://images.xyzzs.top/image/640_char_char" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RocketMQ中有完整的设计，但是在RabbitMQ和kafka当中，并没有完整的设计，需要自己去设计。</p><p>RabbitMQ：要保证目标exchange只对应一个队列，并且一个队列只对应一个消费者。</p><p>kafka：生产者通过定制partition分配规则，将消息分配到同一个partition。Topic只对应一个消费者。</p><h2 id="如何保证消息的高效读写" tabindex="-1"><a class="header-anchor" href="#如何保证消息的高效读写"><span>如何保证消息的高效读写</span></a></h2><p>零拷贝：kafka和RocketMQ都是通过零拷贝技术来优化文件读写。</p><p>mmap：文件大小不要超过1.5G~2G</p><p>transfile：没有文件大小限制</p><h2 id="使用mq如何保证分布式事务的最终一致性" tabindex="-1"><a class="header-anchor" href="#使用mq如何保证分布式事务的最终一致性"><span>使用MQ如何保证分布式事务的最终一致性</span></a></h2><p>保证事务的最终一致性，需要做到两点：</p><ol><li>生产者要保证100%的消息投递，事务消息机制</li><li>消费者需要保证幂等性消费，唯一ID+业务自己实现</li></ol><h2 id="如何处理消息堆积" tabindex="-1"><a class="header-anchor" href="#如何处理消息堆积"><span>如何处理消息堆积</span></a></h2><p>消息的堆积往往是因为<strong>生产者的生产速度与消费者的消费速度不匹配</strong>。有可能是因为消息消费失败反复重试造成的，也有可能就是消费者消费能力弱，渐渐地消息就积压了。</p><p>因此我们需要<strong>先定位消费慢的原因</strong>，如果是<code>bug</code>则处理 <code>bug</code> ，如果是因为本身消费能力较弱，我们可以优化下消费逻辑，比如之前是一条一条消息消费处理的，这次我们批量处理，比如数据库的插入，一条一条插和批量插效率是不一样的。</p><p>假如逻辑我们已经都优化了，但还是慢，那就得考虑水平扩容了，增加<code>Topic</code>的队列数和消费者数量，<strong>注意队列数一定要增加</strong>，不然新增加的消费者是没东西消费的。<strong>一个Topic中，一个队列只会分配给一个消费者</strong>。</p><p>当然你消费者内部是单线程还是多线程消费那看具体场景。不过要注意上面提高的消息丢失的问题，如果你是将接受到的消息写入<strong>内存队列</strong>之后，然后就返回响应给<code>Broker</code>，然后多线程向内存队列消费消息，假设此时消费者宕机了，内存队列里面还未消费的消息也就丢了。</p><p>事前</p><p>​ 业务评测</p><p>事中</p><p>​ k8s扩缩容</p><p>事后</p><ol><li><p>提高消费并发</p></li><li><p>批量消费</p></li><li><p>跳过非重要消费</p></li><li><p>优化每条消息消费</p></li></ol><h2 id="设计mq" tabindex="-1"><a class="header-anchor" href="#设计mq"><span>设计MQ</span></a></h2>',39);function f(u,b){const r=e("RouteLink"),i=e("ExternalLinkIcon");return n(),l("div",null,[m,a("p",null,[t("kafka："),o(r,{to:"/java/message-queue/kafka.html#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81kafka%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%B6%88%E6%81%AF"},{default:s(()=>[t("【1】")]),_:1}),a("a",h,[t("【2】"),o(i)])]),k,c(" 从整体到细节，从业务场景到技术实现；以现有产品为基础 ")])}const _=p(g,[["render",f],["__file","index.html.vue"]]),x=JSON.parse('{"path":"/message-queue/","title":"MQ通用导航栏","lang":"zh-CN","frontmatter":{"description":"MQ通用导航栏 怎么防止消息不丢失 image-20230201140325339image-20230201140325339 一次正常完整的发送消息可以分为三个阶段，分别是生产消息、存储消息和消费消息。我们从这三个阶段分别入手来看看如何确保消息不会丢失。 生产者发送消息不丢失 生产者发送消息至Broker，需要处理Broker的响应，不论是同步还是...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/message-queue/"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"MQ通用导航栏"}],["meta",{"property":"og:description","content":"MQ通用导航栏 怎么防止消息不丢失 image-20230201140325339image-20230201140325339 一次正常完整的发送消息可以分为三个阶段，分别是生产消息、存储消息和消费消息。我们从这三个阶段分别入手来看看如何确保消息不会丢失。 生产者发送消息不丢失 生产者发送消息至Broker，需要处理Broker的响应，不论是同步还是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.xyzzs.top/image/image-20230201140325339.png_char_char"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ通用导航栏\\",\\"image\\":[\\"http://images.xyzzs.top/image/image-20230201140325339.png_char_char\\",\\"http://images.xyzzs.top/image/1668773364658-b3629a0e-a14b-4376-bafb-f3377a17285d.png_char\\",\\"http://images.xyzzs.top/image/1668776845504-22ae4417-ac73-4f1e-93c2-2101cb77e163.png_char\\",\\"http://images.xyzzs.top/image/640_char_char\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"怎么防止消息不丢失","slug":"怎么防止消息不丢失","link":"#怎么防止消息不丢失","children":[]},{"level":2,"title":"如何保证消息消费的幂等性（重复消费）","slug":"如何保证消息消费的幂等性-重复消费","link":"#如何保证消息消费的幂等性-重复消费","children":[]},{"level":2,"title":"如何保证消息的顺序","slug":"如何保证消息的顺序","link":"#如何保证消息的顺序","children":[]},{"level":2,"title":"如何保证消息的高效读写","slug":"如何保证消息的高效读写","link":"#如何保证消息的高效读写","children":[]},{"level":2,"title":"使用MQ如何保证分布式事务的最终一致性","slug":"使用mq如何保证分布式事务的最终一致性","link":"#使用mq如何保证分布式事务的最终一致性","children":[]},{"level":2,"title":"如何处理消息堆积","slug":"如何处理消息堆积","link":"#如何处理消息堆积","children":[]},{"level":2,"title":"设计MQ","slug":"设计mq","link":"#设计mq","children":[]}],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":8.11,"words":2432},"filePathRelative":"message-queue/README.md","localizedDate":"2024年4月24日","autoDesc":true}');export{_ as comp,x as data};
