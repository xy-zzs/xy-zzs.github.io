import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,f as l}from"./app-DmhNJ90i.js";const o={},r=l('<h1 id="分布式锁导航栏" tabindex="-1"><a class="header-anchor" href="#分布式锁导航栏"><span>分布式锁导航栏</span></a></h1><p>一个最基本的分布式锁需要满足：</p><ul><li><strong>互斥</strong> ：任意一个时刻，锁只能被一个线程持有；</li><li><strong>高可用</strong> ：锁服务是高可用的。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。</li><li><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取锁。</li></ul><p>最好还有以下性能：</p><ul><li>重试：</li><li>锁自动延时</li><li>主动一致性</li></ul><p>实现分布式锁一般有以下几种方式：</p><h2 id="数据库的唯一索引" tabindex="-1"><a class="header-anchor" href="#数据库的唯一索引"><span>数据库的唯一索引</span></a></h2><p>获得锁时向表中插入一条记录，释放锁时删除这条记录。唯一索引可以保证该记录只被插入一次，那么就可以用这个记录是否存在来判断是否处于锁定状态。</p><p>存在以下几个问题：</p><ul><li>锁没有失效时间，解锁失败的话其它进程无法再获得该锁；</li><li>只能是非阻塞锁，插入失败直接就报错了，无法重试；</li><li>不可重入，已经获得锁的进程也必须重新获取锁。</li></ul><h2 id="zookeeper-的有序节点" tabindex="-1"><a class="header-anchor" href="#zookeeper-的有序节点"><span>Zookeeper 的有序节点</span></a></h2><p>Zookeeper 提供了一种树形结构的命名空间，/app1/p_1 节点的父节点为 /app1。</p><p>节点类型</p><ul><li>永久节点：不会因为会话结束或者超时而消失；</li><li>临时节点：如果会话结束或者超时就会消失；</li><li>有序节点：会在节点名的后面加一个数字后缀，并且是有序的，例如生成的有序节点为 /lock/node-0000000000，它的下一个有序节点则为 /lock/node-0000000001，以此类推</li></ul><p>实现步骤：</p><ul><li>创建一个锁目录 /lock；</li><li>当一个客户端需要获取锁时，在 /lock 下创建临时的且有序的子节点；</li><li>客户端获取 /lock 下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁；否则监听自己的前一个子节点，获得子节点的变更通知后重复此步骤直至获得锁；</li><li>执行业务代码，完成后，删除对应的子节点</li></ul><h2 id="redis-的-setnx-指令" tabindex="-1"><a class="header-anchor" href="#redis-的-setnx-指令"><span>Redis 的 SETNX 指令</span></a></h2><p>使用 SETNX（set if not exist）指令插入一个键值对，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True。</p><p>SETNX 指令和数据库的唯一索引类似，保证了只存在一个 Key 的键值对，那么可以用一个 Key 的键值对是否存在来判断是否存于锁定状态。</p><p>EXPIRE 指令可以为一个键值对设置一个过期时间，从而避免了数据库唯一索引实现方式中释放锁失败的问题</p><h2 id="redis-的-redlock-算法" tabindex="-1"><a class="header-anchor" href="#redis-的-redlock-算法"><span>Redis 的 RedLock 算法</span></a></h2><p>使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时仍然可用。</p><ul><li>尝试从 N 个互相独立 Redis 实例获取锁；</li><li>计算获取锁消耗的时间，只有时间小于锁的过期时间，并且从大多数（N / 2 + 1）实例上获取了锁，才认为获取锁成功；</li><li>如果获取锁失败，就到每个实例上释放锁</li></ul>',23),s=[r];function a(p,n){return t(),i("div",null,s)}const h=e(o,[["render",a],["__file","lock.html.vue"]]),m=JSON.parse('{"path":"/distributed-system/lock.html","title":"分布式锁导航栏","lang":"zh-CN","frontmatter":{"description":"分布式锁导航栏 一个最基本的分布式锁需要满足： 互斥 ：任意一个时刻，锁只能被一个线程持有； 高可用 ：锁服务是高可用的。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。 可重入：一个节点获取了锁之后，还可以再次获取锁。 最好还有以下性能： 重试： 锁自动延时 主动一致性 实现分布式锁一般有以下几种...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/distributed-system/lock.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"分布式锁导航栏"}],["meta",{"property":"og:description","content":"分布式锁导航栏 一个最基本的分布式锁需要满足： 互斥 ：任意一个时刻，锁只能被一个线程持有； 高可用 ：锁服务是高可用的。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。 可重入：一个节点获取了锁之后，还可以再次获取锁。 最好还有以下性能： 重试： 锁自动延时 主动一致性 实现分布式锁一般有以下几种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式锁导航栏\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"数据库的唯一索引","slug":"数据库的唯一索引","link":"#数据库的唯一索引","children":[]},{"level":2,"title":"Zookeeper 的有序节点","slug":"zookeeper-的有序节点","link":"#zookeeper-的有序节点","children":[]},{"level":2,"title":"Redis 的 SETNX 指令","slug":"redis-的-setnx-指令","link":"#redis-的-setnx-指令","children":[]},{"level":2,"title":"Redis 的 RedLock 算法","slug":"redis-的-redlock-算法","link":"#redis-的-redlock-算法","children":[]}],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":2.75,"words":824},"filePathRelative":"distributed-system/lock.md","localizedDate":"2024年4月24日","autoDesc":true}');export{h as comp,m as data};
