import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,f as e}from"./app-DmhNJ90i.js";const l={},i=e(`<h1 id="shell编程导航栏" tabindex="-1"><a class="header-anchor" href="#shell编程导航栏"><span>Shell编程导航栏</span></a></h1><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#第一个shell小程序,echo 是linux中的输出命令。</span>
<span class="token builtin class-name">echo</span>  &quot;helloworld<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shell 中 # 符号表示注释。<strong>shell 的第一行比较特殊，一般都会以#!开始来指定使用的 shell 类型。在 linux 中，除了 bash shell 以外，还有很多版本的 shell， 例如 zsh、dash 等等...不过 bash shell 还是我们使用最多的。</strong></p><h2 id="shell-变量" tabindex="-1"><a class="header-anchor" href="#shell-变量"><span>Shell 变量</span></a></h2><p><strong>Shell 编程中一般分为三种变量</strong>：</p><p><strong>我们自己定义的变量（自定义变量）:</strong> 仅在当前 Shell 实例中有效，其他 Shell 启动的程序不能访问局部变量。</p><p><strong>Linux 已定义的环境变量</strong>（环境变量， 例如：<code>PATH</code>, <code>HOME</code> 等..., 这类变量我们可以直接使用），使用 <code>env</code> 命令可以查看所有的环境变量，而 set 命令既可以查看环境变量也可以查看自定义变量。</p><p><strong>Shell 变量</strong> ：Shell 变量是由 Shell 程序设置的特殊变量。Shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 Shell 的正常运行</p><p><strong>常用的环境变量:</strong></p><blockquote><p>PATH 决定了 shell 将到哪些目录中寻找命令或程序 HOME 当前用户主目录 HISTSIZE 　历史记录数 LOGNAME 当前用户的登录名 HOSTNAME 　指主机的名称 SHELL 当前用户 Shell 类型 LANGUAGE 　语言相关的环境变量，多语言可以修改此环境变量 MAIL 　当前用户的邮件存放目录 PS1 　基本提示符，对于 root 用户是#，对于普通用户是$</p></blockquote><p><strong>使用 Linux 已定义的环境变量：</strong></p><p>比如我们要看当前用户目录可以使用：<code>echo $HOME</code>命令；如果我们要看当前用户 Shell 类型 可以使用<code>echo $SHELL</code>命令。可以看出，使用方法非常简单。</p><p><strong>使用自己定义的变量：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#自定义变量hello</span>
<span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Shell 编程中的变量名的命名的注意事项：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头，但是可以使用下划线（_）开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li></ul><h3 id="shell-字符串入门" tabindex="-1"><a class="header-anchor" href="#shell-字符串入门"><span>Shell 字符串入门</span></a></h3><p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号。这点和 Java 中有所不同。</p><p>在单引号中所有的特殊符号，如$和反引号都没有特殊含义。在双引号中，除了&quot;$&quot;,&quot;&quot;和反引号，其他的字符没有特殊含义。</p><p><strong>单引号字符串：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&#39;SnailClimb&#39;</span>
<span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&quot;Hello, I  am &quot;</span><span class="token variable">$name</span><span class="token string">&quot;!&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Hello, I am SnailClimb!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="shell-字符串常见操作" tabindex="-1"><a class="header-anchor" href="#shell-字符串常见操作"><span>Shell 字符串常见操作</span></a></h3><p><strong>拼接字符串：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb&quot;</span>
<span class="token comment"># 使用双引号拼接</span>
<span class="token assign-left variable">greeting</span><span class="token operator">=</span><span class="token string">&quot;hello, &quot;</span><span class="token variable">$name</span><span class="token string">&quot; !&quot;</span>
<span class="token assign-left variable">greeting_1</span><span class="token operator">=</span><span class="token string">&quot;hello, <span class="token variable">\${name}</span> !&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$greeting</span>  <span class="token variable">$greeting_1</span>
<span class="token comment"># 使用单引号拼接</span>
<span class="token assign-left variable">greeting_2</span><span class="token operator">=</span><span class="token string">&#39;hello, &#39;</span><span class="token variable">$name</span><span class="token string">&#39; !&#39;</span>
<span class="token assign-left variable">greeting_3</span><span class="token operator">=</span><span class="token string">&#39;hello, \${name} !&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$greeting_2</span>  <span class="token variable">$greeting_3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><figure><img src="http://images.xyzzs.top/image/51148933.jpg_char" alt="输出结果" tabindex="0" loading="lazy"><figcaption>输出结果</figcaption></figure><p><strong>获取字符串长度：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#获取字符串长度</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb&quot;</span>
<span class="token comment"># 第一种方式</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>name}</span> <span class="token comment">#输出 10</span>
<span class="token comment"># 第二种方式</span>
<span class="token function">expr</span> length <span class="token string">&quot;<span class="token variable">$name</span>&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>10
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 expr 命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">expr</span> <span class="token number">5</span>+6    // 直接输出 <span class="token number">5</span>+6
<span class="token function">expr</span> <span class="token number">5</span> + <span class="token number">6</span>       // 输出 <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于某些运算符，还需要我们使用符号<code>\\</code>进行转义，否则就会提示语法错误。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">expr</span> <span class="token number">5</span> * <span class="token number">6</span>       // 输出错误
<span class="token function">expr</span> <span class="token number">5</span> <span class="token punctuation">\\</span>* <span class="token number">6</span>      // 输出30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>截取子字符串:</strong></p><p>简单的字符串截取：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#从字符串第 1 个字符开始往后截取 10 个字符</span>
<span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb is a great man&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${str<span class="token operator">:</span>0<span class="token operator">:</span>10}</span> <span class="token comment">#输出:SnailClimb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据表达式截取：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#!bin/bash</span>
<span class="token comment">#author:amau</span>

<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">&quot;https://www.runoob.com/linux/linux-shell-variable.html&quot;</span>
<span class="token comment"># %表示删除从后匹配, 最短结果</span>
<span class="token comment"># %%表示删除从后匹配, 最长匹配结果</span>
<span class="token comment"># #表示删除从头匹配, 最短结果</span>
<span class="token comment"># ##表示删除从头匹配, 最长匹配结果</span>
<span class="token comment"># 注: *为通配符, 意为匹配任意数量的任意字符</span>
<span class="token assign-left variable">s1</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%%</span>t*}</span> <span class="token comment">#h</span>
<span class="token assign-left variable">s2</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%</span>t*}</span>  <span class="token comment">#https://www.runoob.com/linux/linux-shell-variable.h</span>
<span class="token assign-left variable">s3</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%%</span>.*}</span> <span class="token comment">#http://www</span>
<span class="token assign-left variable">s4</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">#</span>*<span class="token operator">/</span>}</span>  <span class="token comment">#/www.runoob.com/linux/linux-shell-variable.html</span>
<span class="token assign-left variable">s5</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">##</span>*<span class="token operator">/</span>}</span> <span class="token comment">#linux-shell-variable.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell-数组" tabindex="-1"><a class="header-anchor" href="#shell-数组"><span>Shell 数组</span></a></h3><p>bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。我下面给了大家一个关于数组操作的 Shell 代码示例，通过该示例大家可以知道如何创建数组、获取数组长度、获取/删除特定位置的数组元素、删除整个数组以及遍历数组。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 获取数组长度</span>
<span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
<span class="token comment"># 或者</span>
<span class="token assign-left variable">length2</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
<span class="token comment">#输出数组长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$length</span> <span class="token comment">#输出：5</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$length2</span> <span class="token comment">#输出：5</span>
<span class="token comment"># 输出数组第三个元素</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span> <span class="token comment">#输出：3</span>
<span class="token builtin class-name">unset</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 删除下标为1的元素也就是删除第二个元素</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">\${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token comment"># 遍历数组，输出： 1 3 4 5</span>
<span class="token builtin class-name">unset</span> array<span class="token punctuation">;</span> <span class="token comment"># 删除数组中的所有元素</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">\${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token comment"># 遍历数组，数组元素为空，没有任何输出内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-基本运算符" tabindex="-1"><a class="header-anchor" href="#shell-基本运算符"><span>Shell 基本运算符</span></a></h2><blockquote><p>说明：图片来自《菜鸟教程》</p></blockquote><p>Shell 编程支持下面几种运算符</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230207225044494.png_char" alt="image-20230207225044494" tabindex="0" loading="lazy"><figcaption>image-20230207225044494</figcaption></figure><p>我以加法运算符做一个简单的示例（注意：不是单引号，是反引号）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>
<span class="token comment">#输出：Total value : 6</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Total value : <span class="token variable">$val</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><figure><img src="http://images.xyzzs.top/image/image-20230207225111914.png_char" alt="image-20230207225111914" tabindex="0" loading="lazy"><figcaption>image-20230207225111914</figcaption></figure><p>通过一个简单的示例演示关系运算符的使用，下面 shell 程序的作用是当 score=100 的时候输出 A 否则输出 B。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">score</span><span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">;</span>
<span class="token assign-left variable">maxscore</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$score</span> <span class="token parameter variable">-eq</span> <span class="token variable">$maxscore</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;A&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;B&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230207225133587.png_char" alt="image-20230207225133587" tabindex="0" loading="lazy"><figcaption>image-20230207225133587</figcaption></figure><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token variable">))</span></span>
<span class="token comment"># 输出：0；逻辑与运算只有相与的两边都是1，与的结果才是1；否则与的结果是0</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符"><span>布尔运算符</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230207225159064.png_char" alt="image-20230207225159064" tabindex="0" loading="lazy"><figcaption>image-20230207225159064</figcaption></figure><p>这里就不做演示了，应该挺简单的。</p><h3 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230207225216340.png_char" alt="image-20230207225216340" tabindex="0" loading="lazy"><figcaption>image-20230207225216340</figcaption></figure><p>简单示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">&quot;efg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>a 不等于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="文件相关运算符" tabindex="-1"><a class="header-anchor" href="#文件相关运算符"><span>文件相关运算符</span></a></h3><figure><img src="http://images.xyzzs.top/image/image-20230207225238587.png_char" alt="image-20230207225238587" tabindex="0" loading="lazy"><figcaption>image-20230207225238587</figcaption></figure><p>使用方式很简单，比如我们定义好了一个文件路径<code>file=&quot;/usr/learnshell/test.sh&quot;</code> 如果我们想判断这个文件是否可读，可以这样<code>if [ -r $file ]</code> 如果想判断这个文件是否可写，可以这样<code>-w $file</code>，是不是很简单。</p><h2 id="shell-流程控制" tabindex="-1"><a class="header-anchor" href="#shell-流程控制"><span>shell 流程控制</span></a></h2><h3 id="if-条件语句" tabindex="-1"><a class="header-anchor" href="#if-条件语句"><span>if 条件语句</span></a></h3><p>简单的 if else-if else 的条件语句示例</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 大于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 小于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>a 小于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相信大家通过上面的示例就已经掌握了 shell 编程中的 if 条件语句。不过，还要提到的一点是，不同于我们常见的 Java 以及 PHP 中的 if 条件语句，shell if 条件语句中不能包含空语句也就是什么都不做的语句。</p><h3 id="for-循环语句" tabindex="-1"><a class="header-anchor" href="#for-循环语句"><span>for 循环语句</span></a></h3><p>通过下面三个简单的示例认识 for 循环语句最基本的使用，实际上 for 循环语句的功能比下面你看到的示例展现的要大得多。</p><p><strong>输出当前列表中的数据：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;The value is: <span class="token variable">$loop</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>产生 10 个随机数：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> <span class="token environment constant">$RANDOM</span><span class="token punctuation">;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出 1 到 5:</strong></p><p>通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">done</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句"><span>while 语句</span></a></h3><p><strong>基本的 while 循环语句：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
    <span class="token builtin class-name">let</span> <span class="token string">&quot;int++&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while 循环可用于读取键盘信息：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;按下 &lt;CTRL-D&gt; 退出&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;输入你最喜欢的电影: &#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> FILM
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;是的！<span class="token variable">$FILM</span> 是一个好电影&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>按下 &lt;CTRL-D&gt; 退出
输入你最喜欢的电影: 变形金刚
是的！变形金刚 是一个好电影
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>无限循环：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token boolean">true</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-函数" tabindex="-1"><a class="header-anchor" href="#shell-函数"><span>shell 函数</span></a></h2><h3 id="不带参数没有返回值的函数" tabindex="-1"><a class="header-anchor" href="#不带参数没有返回值的函数"><span>不带参数没有返回值的函数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这是我的第一个 shell 函数!&quot;</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数开始执行-----&quot;</span>
hello
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数执行完毕-----&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-----函数开始执行-----
这是我的第一个 shell 函数!
-----函数执行完毕-----
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有返回值的函数" tabindex="-1"><a class="header-anchor" href="#有返回值的函数"><span>有返回值的函数</span></a></h3><p><strong>输入两个数字之后相加并返回结果：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">funWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第一个数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第二个数字: &quot;</span>
    <span class="token builtin class-name">read</span> anotherNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;两个数字分别为 <span class="token variable">$aNum</span> 和 <span class="token variable">$anotherNum</span> !&quot;</span>
    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$aNum<span class="token operator">+</span>$anotherNum<span class="token variable">))</span></span>
<span class="token punctuation">}</span>
funWithReturn
<span class="token builtin class-name">echo</span> <span class="token string">&quot;输入的两个数字之和为 <span class="token variable">$?</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入第一个数字:
1
输入第二个数字:
2
两个数字分别为 1 和 2 !
输入的两个数字之和为 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带参数的函数" tabindex="-1"><a class="header-anchor" href="#带参数的函数"><span>带参数的函数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数为 <span class="token variable">$1</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数为 <span class="token variable">$2</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">$10</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">\${10}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十一个参数为 <span class="token variable">\${11}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;参数总数有 <span class="token variable">$#</span> 个!&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;作为一个字符串输出所有参数 <span class="token variable">$*</span> !&quot;</span>
<span class="token punctuation">}</span>
funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>第一个参数为 1 !
第二个参数为 2 !
第十个参数为 10 !
第十个参数为 34 !
第十一个参数为 73 !
参数总数有 11 个!
作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,114),t=[i];function p(o,c){return a(),n("div",null,t)}const u=s(l,[["render",p],["__file","shell.html.vue"]]),v=JSON.parse('{"path":"/system-design/devops/shell.html","title":"Shell编程导航栏","lang":"zh-CN","frontmatter":{"description":"Shell编程导航栏 shell 中 # 符号表示注释。shell 的第一行比较特殊，一般都会以#!开始来指定使用的 shell 类型。在 linux 中，除了 bash shell 以外，还有很多版本的 shell， 例如 zsh、dash 等等...不过 bash shell 还是我们使用最多的。 Shell 变量 Shell 编程中一般分为三种变...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/system-design/devops/shell.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"Shell编程导航栏"}],["meta",{"property":"og:description","content":"Shell编程导航栏 shell 中 # 符号表示注释。shell 的第一行比较特殊，一般都会以#!开始来指定使用的 shell 类型。在 linux 中，除了 bash shell 以外，还有很多版本的 shell， 例如 zsh、dash 等等...不过 bash shell 还是我们使用最多的。 Shell 变量 Shell 编程中一般分为三种变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.xyzzs.top/image/51148933.jpg_char"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T15:46:57.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-24T15:46:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shell编程导航栏\\",\\"image\\":[\\"http://images.xyzzs.top/image/51148933.jpg_char\\",\\"http://images.xyzzs.top/image/image-20230207225044494.png_char\\",\\"http://images.xyzzs.top/image/image-20230207225111914.png_char\\",\\"http://images.xyzzs.top/image/image-20230207225133587.png_char\\",\\"http://images.xyzzs.top/image/image-20230207225159064.png_char\\",\\"http://images.xyzzs.top/image/image-20230207225216340.png_char\\",\\"http://images.xyzzs.top/image/image-20230207225238587.png_char\\"],\\"dateModified\\":\\"2024-04-24T15:46:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Shell 变量","slug":"shell-变量","link":"#shell-变量","children":[{"level":3,"title":"Shell 字符串入门","slug":"shell-字符串入门","link":"#shell-字符串入门","children":[]},{"level":3,"title":"Shell 字符串常见操作","slug":"shell-字符串常见操作","link":"#shell-字符串常见操作","children":[]},{"level":3,"title":"Shell 数组","slug":"shell-数组","link":"#shell-数组","children":[]}]},{"level":2,"title":"Shell 基本运算符","slug":"shell-基本运算符","link":"#shell-基本运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"布尔运算符","slug":"布尔运算符","link":"#布尔运算符","children":[]},{"level":3,"title":"字符串运算符","slug":"字符串运算符","link":"#字符串运算符","children":[]},{"level":3,"title":"文件相关运算符","slug":"文件相关运算符","link":"#文件相关运算符","children":[]}]},{"level":2,"title":"shell 流程控制","slug":"shell-流程控制","link":"#shell-流程控制","children":[{"level":3,"title":"if 条件语句","slug":"if-条件语句","link":"#if-条件语句","children":[]},{"level":3,"title":"for 循环语句","slug":"for-循环语句","link":"#for-循环语句","children":[]},{"level":3,"title":"while 语句","slug":"while-语句","link":"#while-语句","children":[]}]},{"level":2,"title":"shell 函数","slug":"shell-函数","link":"#shell-函数","children":[{"level":3,"title":"不带参数没有返回值的函数","slug":"不带参数没有返回值的函数","link":"#不带参数没有返回值的函数","children":[]},{"level":3,"title":"有返回值的函数","slug":"有返回值的函数","link":"#有返回值的函数","children":[]},{"level":3,"title":"带参数的函数","slug":"带参数的函数","link":"#带参数的函数","children":[]}]}],"git":{"createdTime":1713973617000,"updatedTime":1713973617000,"contributors":[{"name":"jossezs","email":"zzss5224@163.com","commits":1}]},"readingTime":{"minutes":8.25,"words":2475},"filePathRelative":"system-design/devops/shell.md","localizedDate":"2024年4月24日","autoDesc":true}');export{u as comp,v as data};
